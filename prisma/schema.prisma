datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model House {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  inhabitants   User[]
  bulletins     Bulletin[]
  notifications Notification[]
  groceries     Grocery[]
}

model User {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  email             String         @unique
  passwordHash      String
  name              String
  admin             Boolean        @default(false)
  house             House?         @relation(fields: [houseId], references: [id])
  houseId           String?
  gravatar          String?
  bulletins         Bulletin[]
  bulletinLikes     Bulletin[]     @relation("bulletinLikes")
  notifications     Notification[]
  notificationLikes Notification[] @relation("notificationLikes")
  Grocery           Grocery[]
}

model Bulletin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  house     House    @relation(fields: [houseId], references: [id])
  houseId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  message   String   @db.Text()
  likedBy   User[]   @relation("bulletinLikes")
  archive   Boolean  @default(false)
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  house     House    @relation(fields: [houseId], references: [id])
  houseId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  message   String
  likedBy   User[]   @relation("notificationLikes")
}

model Grocery {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  house     House    @relation(fields: [houseId], references: [id])
  houseId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  name      String
  notes     String   @db.Text()
  archive   Boolean  @default(false)
}
